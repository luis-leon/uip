server.port=8080
# server.servlet.context-path=/${spring.application.name}/v1

# MONITOREO (ACTUATOR)
# Descomentar si se quieren exponer todos los endpoints de actuator.
# (Por defecto, solo se exponen los endpoints info y health. [https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html])
# management.endpoints.web.exposure.include=*
# Mostrar la informacion de salud a todos los usuarios (tambien a los usuarios sin autorizacion).
management.endpoint.health.show-details=ALWAYS

# EUREKA
# Cada cuanto se registra el servicio con el servidor de Eureka.
eureka.instance.leaseRenewalIntervalInSeconds=30
# Direccion del servidor de Eureka.
eureka.client.serviceUrl.defaultZone=http://eureka:password@apdesatprec01:8761/sat-eureka-server/eureka/

# BASE DE DATOS
spring.datasource.platform=postgres
spring.datasource.url=jdbc:postgresql://apdesatprec01:5432/dbdesa
spring.datasource.username=postgres
spring.datasource.password=desa123$

# CONFIGURACION DE HIBERNATE
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.type=trace

# ACCESO A OTRO MICROSERVICIO POR MEDIO DE EUREKA
# MICROSERVICIO2: nombre en Eureka del microservicio que desea consumirse.
# sat.microservicio2.pingUrl=http://MICROSERVICIO2/path/del/metodo/a/consumir/

# LOG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework=ERROR
# logging.level.gt.gob.sat.uip.service_asignacionesrevisores=TRACE
logging.level.gt.gob.sat=TRACE

# CARGA DE ARCHIVOS
spring.http.multipart.max-file-size=10MB
spring.http.multipart.max-request-size=10MB
spring.http.multipart.enabled=true
file.upload-dir=./uploads

# VALIDACION DE RECAPTCHA
google.recaptcha.verify.url=https://www.google.com/recaptcha/api/siteverify
google.recaptcha.verify.secret=

# SEGURIDAD OAUTH2
# Scope debe permitir obtener token y validarlo.
# Para obtener token se requiere Grant Type = Client Credentials.
security.oauth2.resource.active=false
# Endpoint del servidor de autorizaci\u00ef\u00bf\u00bdn para validacion de tokens.
security.oauth2.resource.token-info-uri=https://desafarm3.sat.gob.gt/oauth2/introspect
# Endpoint del servidor de autorizaci\u00ef\u00bf\u00bdn para obtencion de tokens.
security.oauth2.resource.token-access-uri=https://desafarm3.sat.gob.gt/oauth2/token
security.oauth2.client.client-id=clientId
security.oauth2.client.client-secret=clientSecret
security.oauth2.client.scope=hydra.introspect

